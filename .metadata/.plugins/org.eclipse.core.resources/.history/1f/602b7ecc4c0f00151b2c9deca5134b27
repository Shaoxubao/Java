package com.msm.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.msm.model.Sample;
import com.msm.model.SampleFlow;
import com.msm.service.sample.service.ISampleService;

/**
 * 药品注册管理模块
 */
@Controller
@RequestMapping("/samplem")
public class SampleRegisteController {

    @Autowired
    private ISampleService sampleService;

    /*
    @RequestMapping("/addsample")
    public ModelAndView addSample(HttpServletRequest request,
                                  HttpServletResponse response) {
        Sample sampleInfo = new Sample();
        sampleInfo.setSampleNo(request.getParameter("sampleno"));
        sampleInfo.setSampleName(request.getParameter("samplename"));
        sampleInfo.setSampleKind(request.getParameter("samplekind"));
        sampleInfo.setMianSection(request.getParameter("mainsection"));
        sampleInfo.setSecondSection(request.getParameter("secondsection"));
        sampleInfo.setProduce(request.getParameter("produce"));
        sampleInfo.setSpecs(request.getParameter("specs")); // 规格
        sampleInfo.setAmount(request.getParameter("amount"));
        sampleInfo.setIsChecked(request.getParameter("ischecked"));
        sampleInfo.setIsCheckPassed(request.getParameter("ispassed"));
        sampleInfo.setReceiveDate(request.getParameter("revdate"));
        sampleInfo.setConclusionDate(request.getParameter("concludedate"));

        System.out.println("-------------------------");

        ModelAndView mv =new ModelAndView("sample/add_sample", "command", "");
        mv.addObject("sample", sampleInfo);
        System.out.println(sampleInfo);
        sampleService.addSample(sampleInfo);

        return mv;
    }*/

    /**
     * 检品注册添加
     */
    @RequestMapping(value="/addsample", method=RequestMethod.GET)
    public String addSample(Model model) {
        model.addAttribute(new Sample());
        return "sample/add_sample";
    }

    @RequestMapping(value="/addsample", method=RequestMethod.POST)
    public String addSample(@Validated Sample sample, BindingResult br) {
        if (br.hasErrors()) {
            return "sample/add_sample";
        }

        System.out.println(sample);
        sampleService.addSample(sample);
        return "redirect:/samplem/samples";
    }

    /**
     * 所有检品列表
     */
    @RequestMapping(value="/samples", method=RequestMethod.GET)
    public String listSample(Model model) {
        model.addAttribute("pagers", sampleService.find());
        return "sample/list_sample";
    }

    /**
     * 检品删除
     */
    @RequestMapping(value="/deletesample", method=RequestMethod.GET)
    public String deletesample(Model model) {
        model.addAttribute("pagers", sampleService.find());
        return "sample/delete_sample";
    }

    @RequestMapping(value="/{sampleNo}/deletesample", method=RequestMethod.GET)
    public String deletesample(@PathVariable String sampleNo) {
        Sample sample = sampleService.loadBySampleNo(sampleNo);
        sampleService.deleteSample(sample.getSampleId());
        System.out.println("SampleId:"+sample.getSampleId());
        return "redirect:/samplem/samples";
    }

    /**
     * 更新检品信息
     */
    @RequestMapping(value="/update", method=RequestMethod.GET)
    public String updateSample(Model model) {
        model.addAttribute("pagers", sampleService.find());
        return "sample/update_sample_info";
    }

    @RequestMapping(value="/{sampleNo}/update", method=RequestMethod.GET)
    public String updateSample(@PathVariable String sampleNo, Model model) {
        model.addAttribute(sampleService.loadBySampleNo(sampleNo));
        return "sample/update_sample";
    }

    @RequestMapping(value="/{sampleNo}/update", method=RequestMethod.POST)
    public String updateSample(@PathVariable String sampleNo, @Validated Sample sample,
                               BindingResult br, Model  model) {
        if (br.hasErrors()) {
            model.addAttribute(sample);
            return "sample/update_sample";
        }

        Sample s = sampleService.loadBySampleNo(sampleNo);
        s.setSampleNo(sample.getSampleNo());
        s.setSampleName(sample.getSampleName());
        s.setSampleKind(sample.getSampleKind());
        s.setMianSection(sample.getMianSection());
        s.setSecondSection(sample.getSecondSection());
        s.setProduce(sample.getProduce());
        s.setSpecs(sample.getSpecs());
        s.setAmount(sample.getAmount());
        s.setIsChecked(sample.getIsChecked());
        s.setIsCheckPassed(sample.getIsCheckPassed());
        s.setReceiveDate(sample.getReceiveDate());
        s.setConclusionDate(sample.getConclusionDate());
        sampleService.updateSample(s);

        return "redirect:/samplem/samples";
    }

    /**
     * 查询检品信息
     */
    @RequestMapping(value="/show", method=RequestMethod.GET)
    public String show(Model model) {
        model.addAttribute("pagers", sampleService.find());
        return "sample/show_sample";
    }

    @RequestMapping(value="/{sampleNo}", method=RequestMethod.GET)
    public String show(@PathVariable String sampleNo, Model model) {
        model.addAttribute(sampleService.loadBySampleNo(sampleNo));
        return "sample/show_sample_info";
    }

    /**
     * 管理员对药品管理模块
     */
    /**
     * 未检查药品列表
     */
    @RequestMapping(value="/unchecked", method=RequestMethod.GET)
    public String unchecked(Model model) {
    	model.addAttribute("pagers", sampleService.findByCheckConditionsF("false"));
    	return "sample/list_unchecked";
    }

    /**
     * 已被检查药品列表
     */
    @RequestMapping(value="/checked", method=RequestMethod.GET)
    public String checked(Model model) {
    	model.addAttribute("pagers", sampleService.findByCheckConditionsT("true"));
    	return "sample/list_checked";
    }

    /**
     * 已通过检查列表
     */
    @RequestMapping(value="/checkpassed", method=RequestMethod.GET)
    public String checkpassed(Model model) {
    	model.addAttribute("pagers", sampleService.findByPassConditionsT("true"));
    	return "sample/list_passed";
    }

    /**
     * 未通过检查列表
     */
    @RequestMapping(value="/checkunpassed", method=RequestMethod.GET)
    public String checkunpassed(Model model) {
    	model.addAttribute("pagers", sampleService.findByPassConditionsF("false"));
    	return "sample/list_unpassed";
    }

    /**
     * 检品检验流程查看
     */
    @RequestMapping(value="/sampleflow", method=RequestMethod.GET)
    public String sampleflow(Model model) {
    	model.addAttribute("pagers", sampleService.findSampleFlow());
    	return "sample/list_sampleflow";
    }

    /**
     * 检验流程表检品注册
     */
    @RequestMapping(value="/addsampleflow", method=RequestMethod.GET)
    public String addsampleflow(Model model) {
    	model.addAttribute(new SampleFlow());
    	return "sample/add_sampleflow";
    }

    public String addsampleflow(@Validated SampleFlow sampleFlow, BindingResult br) {
    	return "redirect:sample/list_sampleflow";
    }

}
